# -*- coding: utf-8 -*-
"""Problem 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uwWRv8PJpxfl8M1ziZFTl_sQ9J8x9_kT
"""

# Problem 2: Minimum Spanning Forest

class DisjointSet:
    def __init__(self, n):
        self.parent = [i for i in range(n + 1)]
        self.rank = [0] * (n + 1)

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)

        if root_x != root_y:
            if self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            elif self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            else:
                self.parent[root_x] = root_y
                self.rank[root_y] += 1

def kruskal(graph, k):
    edges = sorted(graph, key=lambda x: x[2])
    ds = DisjointSet(max(max(u, v) for u, v, _ in edges))

    total_weight = 0
    trees = 0

    for u, v, w in edges:
        if ds.find(u) != ds.find(v):
            ds.union(u, v)
            total_weight += w
            trees += 1

            if trees == k:
                break

    return total_weight

# Input
n, m, k = map(int, input().split())
graph = [tuple(map(int, input().split())) for _ in range(m)]

# Output
result = kruskal(graph, k)
print("Example input: \tExample output:")
print(f"{n} {m} {k}")
for edge in graph:
    print(" ".join(map(str, edge)))
print(result)